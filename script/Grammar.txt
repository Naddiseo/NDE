    /*
	 * Grammar
	 *
	 *
	 * program
	 * 	: declarations
	 * 	| // empty
	 * 	;
	 */

	/*
	 * declarations
	 * 	: declarations declaration
	 * 	| declaration
	 * 	;
	 */

	/* declaration
	 * 	: function_decl
	 * 	| var_decl
	 * 	| class_decl
	 * 	;
	 */

	/* var_decl
	 * 	: var_type ident_t optional_var_assign ';'
	 * 	;
	 */

	/* var_type
	 * 	: ident_t
	 * 	| int
	 * 	| uint
	 * 	| float
	 * 	| string
	 * 	| vector
	 * 	| bool
	 * 	;
	 */

	/* optional_var_assign
	 * 	: ASSIGN expr
	 * 	| // empty
	 * 	;
	 */

	/*
	 * expr
	 *   : assignment_expr
	 *   ;
	 */

	/*
	 * assignment_expr
	 *   : assignment_expr ASSIGN ternary_expr
	 *   | assignment_expr BORASSIGN ternary_expr
	 *   | assignment_expr BANDASSIGN ternary_expr
	 *   | assignment_expr BXORASSIGN ternary_expr
	 *   | assignment_expr LSHIFTASSIGN ternary_expr
	 *   | assignment_expr RSHIFTASSIGN ternary_expr
	 *   | assignment_expr ADDASSIGN ternary_expr
	 *   | assignment_expr SUBASSIGN ternary_expr
	 *   | assignment_expr MULASSIGN ternary_expr
	 *   | assignment_expr DIVASSIGN ternary_expr
	 *   | ternary_expr
	 *   ;
	 */
	/*
	 * ternary_expr
	 *   : or_expr QUESTION expr COLON expr
	 *   | or_expr
	 *   ;
	 */

	/*
	 * or_expr
	 *   : or_expr OR and_expr
	 *   | and_expr
	 *   ;
	 */

	/*
	 * and_expr
	 *   : and_expr AND bor_expr
	 *   | bor_expr
	 *   ;
	 */

	/*
	 * bor_expr
	 *   : bor_expr BOR bxor_expr
	 *   | bxor_expr
	 *   ;
	 */

	/*
	 * bxor_expr
	 *   : bxor_expr BXOR band_Expr
	 *   | band_expr
	 *   ;
	 */

	/*
	 * band_expr
	 *   : xand_expr BAND eq_expr
	 *   | eq_expr
	 *   ;
	 */

	/*
	 * eq_expr
	 *   : eq_expr EQUALS comparison_expr
	 *   | eq_expr NEQUALS comparison_expr
	 *   | comparison_expr
	 *   ;
	 */

	/*
	 * comparison_expr
	 *   : comparison_expr GT shift_expr
	 *   | comparison_expr LT shift_expr
	 *   | comparison_expr GTE shift_expr
	 *   | comparison_expr LTE shift_expr
	 *   | shift_expr
	 *   ;
	 */

	/*
	 * shift_expr
	 *   : shift_expr LSHIFT add_expr
	 *   | shift_expr RSHIFT add_expr
	 *   | add_expr
	 *   ;
	 */

	/*
	 * add_expr
	 *   : add_expr ADD mul_expr
	 *   | add_expr SUB mul_expr
	 *   | mul_expr
	 *   ;
	 */

	/*
	 * mul_expr
	 *   : mul_expr MUL unary_expr
	 *   | mul_expr DIV unary_expr
	 *   | mul_expr MOD unary_expr
	 *   | unary_expr
	 *   ;
	 */

	/*
	 * unary_expr
	 *   : BNOT unary_expr
	 *   | NOT unary_expr
	 *   | INC unary_expr
	 *   | DEC unary_expr
	 *   | primary_expr
	 *   ;
	 */

	/*
	 * primary_expr
	 *   : atom
	 *   | attribute
	 *   | subscript
	 *   | function_call
	 *   ;
	 */

	/*
	 * atom
	 *   : IDENT
	 *   | literal
	 *   | LPAREN expr RPAREN
	 *   ;
	 */

	/*
	 * attribute
	 *   : primary_expr DOT IDENT
	 *   ;
	 */

	/*
	 * subscript
	 *   : primary LSQUARE expr RSQUARE
	 *   ;
	 */

	/*
	 * function_call
	 *   : primary LPAREN optional_expr_list RPAREN
	 *   ;
	 */

	/*
	 * literal
	 *   : STRINGVAL
	 *   | INTVAL
	 *   | UINTVAL
	 *   | BOOLVAL
	 *   | TRUE
	 *   | FALSE
	 *   | FLOATVAL
	 *   | VECTORVAL
	 *   ;
	 */

	/*
	 * optional_expr_list
	 *   : expr_list
	 *   | // empty
	 *   ;
	 */

	/*
	 * expr_list
	 *   : expr_list ',' expr
	 *   | expr
	 *   ;
	 */